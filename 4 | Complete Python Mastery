Key programs/settings...
Python Download: https://www.python.org/downloads/
Editor/IDE: Visual Studio Code... https://code.visualstudio.com/Download
Create User Profile
Download extensions: Python, Pylint, Code Runner, and autopep8
Settings:
[X] Check Format On Save
Code Runner Settings:
[X] Code-runner: Clear Previous Output
[]  Code-runner: Show Execution Message
___________________________________________________________________________________________________________
1.5 - Create Your First Pyton Program
print("Hello World")
print("*" * 10)

1.8 - Formatting Python Code
x = 1
y = 2
unit_price = 3

1.9 - Running Python Code
print("Hello World!")
# press Ctrl + Alt + N

1.12 - Quiz
# 1. What is an expression?
## Answer: An expression is a piece of code that produces a value
# 2. Here is an expression, what do you think it's value is?
#    "*" * 3
## Answer: ***
# 3. What is a syntax error?
## Answer: A syntax error is a type of error that is due to bad syntax or bad grammar in the code
# 4. What does a linter do?
## Answer: A linter is a tool that checks our code for potential errors. Mostly in the category of syntactical errors. So if you have grammatical issues in our code, the linter will tell us before running our code.

2.1 - Variables
students_count = 1000  # Integer
rating = 4.99  # Float
is_published = False  # Boolean Values (True or False) - Capitalize
course_name = "Python Programming" # String
print(students_count)
print(rating)
print(is_published)

2.2 - Variable Names
students_count = 1000
rating = 4.99
is_published = True
course_name = "Python Programming"

# What are the four things consistently used in this program?
# Answer:
# 1. All variable names are descriptive and meaningful
# 2. lowercase letters to name variables
# 3. underscore to separate multiple words (no spaces allowed for variables)
# 4. A space around the equal sign

2.3 - Strings
course = "Python Programming"
# you can use double quotes or single quotes, or even triple quotes
message = """
Hi John,

This is Mosh from codewithmosh.com

Blah Blah Blah
"""

# calling (using) a function called length.
# Functions take arguments (inputs to these functions) [like 'course' below]
print(len(course))

# For access to a specific character, use square brackets []
# 0 is the first index number
print(course[0])

# you can also do negatives - it will start from the end first
print(course[-1])

# range of numbers in the indexes are not inclusive
# meaning this one will take the first 3 characters (0,1,2 or Pyt)
print(course[0:3])

# You can see below this will start at the third character and go to the end.
print(course[2:])

# Here you will start from the beginning and go to the thrid character
print(course[:3])

# If you don't put either, it will give a copy of the original string
print(course[:])

2.4 - Escape Sequences

# \ - the backslash is an escape character
# meaning the character after the backslash
course = "Python \"Programming"
# another way to write this would be to use single quotes around the string
print(course)

# Other escape sequences
## \" - for (")
## \' - for (')
## \\ - for (\)
## \n - for new line

2.5 - Formatted Strings
first = "Mosh"
last = "Hamedani"
full = first + " " + last
print(full)
full = f"{first} {last}"
print(full)
full = f"{len(first)} {last}"
print(full)
full = f"{len(first)} {2 + 2}"
print(full)

2.6 - String Methods
course = "  PytHon Programming  "
# Everything in python is an obaject.
# Objects have 'functions' called methods
# .upper to convert all characters to uppercase
print(course.upper())
# methods don't change the original 'course' variable
print(course)
# .lower to convert all to lowercase
print(course.lower())
# .title will make the first letter of each word capitalized and the rest lowercase
print(course.title())
# .strip will get rid of any 'white' space - meaning any unnecassary spaces
print(course.strip())
# .lstrip - removes from the beginning of the string
print(course.lstrip())
# .rstrip - removes from the end of the string
print(course.rstrip())
# .find - index of 'Pro' - position - where it starts (remember 0 is position 1)
print(course.find("Pro"))
# if it is not found in the index, it will equal -1
print(course.find("pro"))
# .replace will whaterver you put first with the one you put second
print(course.replace("P", "J"))
# expression (peice of code that produces a value) 'in' -- returns a Boolean value (True or False)
print("Pro" in course)
# 'Not' Operator. To see if it does or doesn't contain [a] character(s)
print("Swift" not in course)

2.7 - Numbers
# integers (non decimal)
x = 1
# floats (decimals)
x = 1.1
# complex numbers (i = imaginary number)
x = 1 + 2j  # a + bi
# Addition (+)
print(10 + 3)
# Subtraction (-)
print(10 - 3)
# Multiplication (*)
print(10 * 3)
# Division (Floating point number)
print(10 / 3)
# Divsion (Integer)
print(10 // 3)
# Remainder of the division
print(10 % 3)
# Exponent (left to the power of right)
print(10 ** 3)

# Augmented Assignment Operator
# x = 10, These two are the exact same: "x = x + 3" = "x += 3"
x = 10
print(x)
x = x + 3
print(x)

x = 10
print(x)
x += 3
print(x)

2.8 - Working with Numbers
# round function, will round the value
print(round(2.9))

# abs function will give the absolute value
print(abs(-2.9))

# only so many build in functions for more:
# use modules like the math module
# A module is like a separate file with some Python code.

import math
math.ceil(2.2)
# https://docs.python.org/3/library/math.html

2.9 - Type Conversion
# Integer
# int(x)

# Float
# float(x)

# Boolean
# bool(x)

# String
# str(x)

# x = input("X: ")
# print(type(x))

x = input("X: ")
y = int(x) + 1
print(f"x: {x}, y: {y}")

# For Boolean values there are falsy and truthy
# Falsy
# "" - empty strings, 0, None - an absence of value
bool(0) # False
bool(1) # True
bool(-1) # True
bool(5) # True
bool("") # False
bool("False") # True

2.10 - Quiz
# 1. What are the built in primitive types in python?
## Answer: Strings, Booleans, and Numbers. (Numbers can be integers, floats, or complex numbers)
# 2. We have this variable fruit, set to "Apple", what will we see in the terminal when we execute the code.
# fruit = "Apple"
# print(fruit[1])
## Answer: p
# 3. What about if we add a colon and -1 like:
# fruit = "Apple"
# print(fruit[1:-1])
## Answer: ppl -- after the colon is not inclusive.
# 4. What is the result of this expression:
# 10 % 3
## Answer: 1
# 5. What will we see when we execute this code:
# print(bool("False"))
## Answer: True

3.1 - Comparison Operators
print(10 > 3)  # True
print(10 >= 3)  # True
print(10 < 20)  # True
print(10 <= 20)  # True
print(10 == 10)  # True
print(10 == "10")  # False
print(10 != "10")  # True
print("bag" > "apple")  # True (because it goes alphabetical order)
print("bag" == "BAG")  # False
# the reason this is false is that every character has it's own numerical representation.
print(ord("b"))
print(ord("a"))
print(ord("B"))
print("Bag" > "apple")

3.2 - Conditional Statements
temperature = 35
if temperature > 30:  # make sure to use the colon!!
    print("It's warm")
    print("Drink water")
print("Done")

temperature = 15
if temperature > 30:
    print("It's warm")
    print("Drink water")
print("Done")

temperature = 22
if temperature > 30:
    print("It's warm")
    print("Drink water")
elif temperature > 20:
    print("It's nice")
else:
    print("It's cold")
print("Done")

3.3 - Ternary Operators
age = 22
if age >= 18:
    print("Eligible")
else:
    print("Not Eligible")

# For cleaner code, make the following changes:
age = 18
if age >= 18:
    message = "Eligible"
else:
    message = "Not Eligible"
print(message)

# Another way you can write this is:
age = 12
message = "Eligible" if age >= 18 else "Not Eligible"
print(message)

3.4 - Logical Operators
# and, or, not

# and operator, both need to be true
high_income = True
good_credit = True

if high_income and good_credit:  # no need to add ==True, it's redundant
    print("Eligible")

high_income = False
good_credit = True

if high_income and good_credit:  # no need to add ==True, it's redundant
    print("Eligible")
else:
    print("Not Eligible")


# or operator, only 1 needs to be true
high_income = False
good_credit = True

if high_income or good_credit:  # no need to add ==True, it's redundant
    print("Eligible")
else:
    print("Not Eligible")

# not operator, it inverses the value of the Boolean
high_income = False
good_credit = True
student = True

if not student:
    print("Eligible")
else:
    print("Not Eligible")

student = False
if not student:
    print("Eligible")
else:
    print("Not Eligible")


# More complicated:
high_income = False
good_credit = True
student = False

if (high_income or good_credit) and not student:
    print("Eligible")
else:
    print("Not Eligible")

3.5 - Short-circuit Evaluation
high_income = True
good_credit = True
student = True

if high_income and good_credit and not student:
    print("Eligible")
else:
    print("Not Eligible")

# Short circuit means, it will execute the if statements as long as it is true
# as soon as it becomes false, it will go to the elif, else or end the if statement (depending on how you set it up)
# logical operators are short circuit.

3.6 - Chaining Comparison Operators
# age should be between 18 and 65
age = 22
if age >= 18 and age < 65:
    print("Eligible")

# in math: 18 <= age < 65
# you can do the same in python, and should use this:
age = 70
if 18 <= age < 65:
    print("Eligible")
else:
    print("Not eligible")

# this is called "chaining comparison operators"

3.7 - Quiz
# 1. What do you think we will see on the terminal when we run this program:
# if 10 == "10":
#   print("a")
# elif "bag" > "apple" and "bag" > "cat":
#   print("b")
# else:
#   print("c")
## Answer: c

3.8 - For Loops
print("Sending a message")
print("Sending a message")
print("Sending a message")
# we use loops to create repetition
# instead to do this 3 times we can do this:
for number in range(3):
    print("Attempt", number + 1, (number + 1) * ".")

# we can make it cleaner like this:
for number in range(1, 4):
    print("Attempt", number, number * ".")

# we can do steps too, meaning it jumps over another number based on the number of steps you want:
for number in range(1, 10, 2):
    print("Attempt", number, number * ".")

3.9 - For..Else
successful = True
for number in range(3):
    print("Attempt")
    if successful:
        print("Successful")
        break

successful = False
for number in range(3):
    print("Attempt")
    if successful:
        print("Successful")
        break
else:
    print("Attempted 3 times and failed.")

3.10 - Nested Loops
for x in range(5):  # outer loop
    for y in range(3):  # inner loop
        print(f"{x}, {y}")

3.11 - Iterables
print(type(5))
print(type(range(5)))
# range is a complex type
# int falls into the primitive types

# the range object is iterable, meaning:
# you can iterate over it, or use it in a for loop
for x in range(5):
    print(x)

# strings are also iterable
for x in "Python":
    print(x)

# Lists are another complex type
# represented with square brackets []
for x in [1, 2, 3, 4]:
    print(x)

# later in the course:
for item in shopping_cart:
    print(item)

3.12 - While Loops
number = 100

while number > 0:
    print(number)
    number //= 2  # same as: number = number // 2 (// is integer division)

# not iterating over a iterable object.
# rather we are evaulating a condition and repeating a task

command = ""
while command != "quit":
    command = input(">")
    print("ECHO", command)

# quit is different from QUIT

command = ""
while command.lower() != "quit":
    command = input(">")
    print("ECHO", command)

3.13 - Infinite Loops
while True:
    command = input(">")
    print("ECHO", command)
    if command.lower() == "quit":
        break

# always have a way to break out of the loop.

3.14 - Exercise
# 1. Write a program to display the even numbers 1-10
# Meaning we should see - 2, 4, 6, 8.
# Then print the message "We have 4 even numbers"
# you can't step over numbers, meaning you can't use the third argument in range.
# you need to call the range function 1 and 10
# like so: range(1, 10)
# I want you to iterate over all the numbers between 1 to 10, check if each number is an even number and then print it in the terminal

# My Answer:
count = 0
for x in range(1, 10):
    if x % 2 == 0:
        print(x)
        count += 1
print(f"We have {count} even numbers")

# Solution:
count = 0
for number in range(1, 10):
    if number % 2 == 0:
        count += 1
        print(number)
print(f"We have {count} even numbers")

#### Be sure to be more specific (don't use x as the holder)

4.1 - Defining Functions
# build your own function
# naming functions: meaningful, descriptive, use lowercase letters, and underscores
def greet():
    print("Hi there")
    print("Welcome aboard")


# add 2 line breaks (pep8 recommended)
greet()

4.2 - Arguments
# build your own function
# naming functions: meaningful, descriptive, use lowercase letters, and underscores
# def greet():
# print("Hi there")
# print("Welcome aboard")


# add 2 line breaks (pep8 recommended)
# greet()


# What is the difference between the greet() and print() functions?
# Answer: The difference is that this print function takes an input,
# whereas our greet function doesn't take any inputs.

# to add input, you can add parameters.
# meaning between the 2 paratheses, you can add the inputs.

def greet(first_name, last_name):
    print(f"Hi {first_name} {last_name}")
    print("Welcome aboard")


greet("Mosh", "Hamedani")
greet("John", "Smith")
# if you add this function, the arguments are REQUIRED or the function won't run.
# parameter is when defining the function - input that you define for your function
# an argument is the value given to the parameter.
# you can't exclude one argument here. Later we will learn how to define optional parameters.

4.3 - Types of Functions


def greet(name):
    print(f"Hi {name}")


# Two types of functions in programming:
# Type 1- Perform a task (print)
# Type 2- Return a value (round)

round(1.9)

# Type 2 is usable in other ways than carrying out the task.


def get_greeting(name):
    return f"Hi {name}"


message = get_greeting("Mosh")
print(message)

# we will learn more later on this:
# file = open("content.txt", "w")
# file.write(message)

4.4 - Keyword Arguments
def increment(number, by):
    return number + by


result = increment(2, 1)
print(result)

# This is the same
print(increment(2, 1))

# This can make it more readable, when you have multiple arguments:
print(increment(2, by=1))

4.5 - Default Arguments
# make by optional parameter
# hoewever, you cannot add required parameters after optional ones. So all required ones MUST come first.
def increment(number, by=1):
    return number + by


print(increment(2))  # uses the 1 that was set as the default
print(increment(2, 5))

4.6 - xargs
# lists are defined by square brackets []
# tuples are defined by parentheses ()
# you cannot modify the tuples' collection, cannot add a new object
# tuples are iterable
def multiply(*numbers):
    total = 1
    for number in numbers:
        # total = total * number --- augmented assignment operator below
        total *= number
    return total


print(multiply(2, 3, 4, 5))

4.7 xxargs
def save_user(**user):
    print(user["id"])


# you can add keyword arguments to this type
save_user(id=1, name="John", age=22)

# this is called a dictionary
# this is a complex type or data structure
# more on this later.

4.8 - Scope
def greets():
    message = "a"


# print(message)
# an error will happen because the variable 'message' is a scope
# scope means it only exists within a function.
# it's a local variable
# meaning you can do something like this:


def greet(name):
    message = "a"


def send_email(name):
    message = "b"

# the name and message in these different functions do not affect each other, because they only exist in that function.
# helps save memory.
# a global variable would be available in any function.
# global functions go outside of functions though.
# they stay in the memory for a longer period of time.
# don't use global variables too often.


message = "a"


def get(name):
    message = "b"


get("Mosh")
print(message)  # returns "a" - because global variable is not changed


def get1(name):
    global message  # using this is very bad practice.
    message = "b"


get1("Mosh")
print(message)
# the get1 function here changes the global function because global was called to it


4.9 - Debugging
def multiply(*numbers):
    total = 1
    for number in numbers:
        total *= number
        return total
    # return total


print("start")
print(multiply(1, 2, 3))
# press F9 to add a breakpoint
# to execute 1 statement at a time, press F10

4.10 - VSCode Coding Tricks - Windows
# To go to the end of a line press 'End' on the keyboard
# To move the cursor to the beginning of the line, press 'Home'
# To move the cursor to the beginning of the file, press Ctrl + Home
# To move the cursor to the end of the file, press Ctrl + End
# To select a line, you can hold Ctrl + Shift + [Up or Down]
# To move a selected line, press Alt + [Up or Down]
# To duplicate a line, press Shift + Alt + Down
# To convert a line or multiple lines into a comment (or remove them from being a comment) press Ctrl + / (the '?/' key on the keyboard)
# To autocomplete a function, start typing and then in the intellicence, select the one to finish the word, then press enter
# for the autocomplete, it doesn't even need to be the first characters, but may be easiest that way??

4.12 - Exercise
and 
4.13 - Solution
# Fizz Buzz Algorithm

# the fizz_buzz function should take an input and depending on the input we give it, it returns different results.
# Here are the rules:
# If the input that we give it is divisible by 3, it will return the string "fizz"
# If the input is divisible by 5, it will return 'Buzz'
# If it is divisible by 3 AND 5, it will return 'FizzBuzz'
# For any other numbers it will return the same input.

# My answer:
def fizz_buzz(input):
    if input == 0:
        return input
    elif input % 3 == 0 and input % 5 == 0:
        return "FizzBuzz"
    elif input % 3 == 0:
        return "Fizz"
    elif input % 5 == 0:
        return "Buzz"
    else:
        return input


print(fizz_buzz(0))


# CodewithMosh Answer:
def fizz_buzz(input):
    if (input % 3 == 0) and (input % 5 == 0):
        return "FizzBuzz"
    elif input % 3 == 0:
        return "Fizz"
    elif input % 5 == 0:
        return "Buzz"
    else:
        return input

## This is good for putting the parentheses to separate the two conditions in the first if.
## However, I would say that if you pass 0 through this, then it actually doesn't work.
## This would be why the additional condition, if 0 is the input, then you should return the input as well.

5.1 - Lists
# built-in data structures in Python
# Lists - []
letters = ["a", "b", "c"]
# matrix (two dimensional list)
matrix = [[0, 1], [2, 3]]
zeros = [0] * 5
combined = zeros + letters
print(combined)
numbers = list(range(20))
print(numbers)
chars = list("Hello World")
print(chars)
print(len(numbers))


# Tuples - ()
# Sets
# Dictionaries

5.2 - Accessing Items
letters = ["a", "b", "c", "d"]
print(letters)
print(letters[0])
print(letters[-1])
letters[0] = "A"
print(letters)
print(letters[0:3])
print(letters[::2])  # you can step over lists this way (step over by 2)
print(letters[::-1])  # reverse order

5.3 - List Unpacking
numbers = [1, 2, 3]
# first = numbers[0]
# second = numbers[1]
# third = numbers[2]
# instead of the above, you can unpack the list into multiple variables
first, second, third = numbers
# the number of items on the left side of the equation (the variables) should be equal to the number of items in the list.
# an error will happen if you don't.
number = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 9]
# if you only want the first two items though, you can pull them into 2 variable and pack the rest into a new list:
one, two, *other = number
print(one)
print(other)
# unpacking and packing.
first, *other, last = number
print(first, last)
print(other)

5.4 - Looping over lists
letters = ["a", "b", "c"]

for letter in letters:
    print(letter)

# enumerate will give a tuple (in this case, giving the position and each letter)
for letter in enumerate(letters):
    print(letter)
# tuple - read only, and cannot add items to it

for letter in enumerate(letters):
    print(letter[0], letter[1])

for index, letter in enumerate(letters):
    print(index, letter)

for index, letter in enumerate(letters):
    print(f"Index: {index}, Letter: {letter}")

5.5 - Adding or Removing Items
letters = ["a", "b", "b", "c", "d", "e", "f", "g"]

# Add to the end (.append(what to add))
letters.append("h")
print(letters)

# Add to a specific position (.insert([index, what to add]))
letters.insert(0, "-")
print(letters)

# Remove from end (.pop())
letters.pop()
print(letters)

# Remove from specific position (.pop([position]))
letters.pop(0)
print(letters)

# To remove an object that you aren't sure of the position, but know what it is in the list
# Use .remove(what you want to remove)
# note: this will find the find occurrence and only remove that one.
letters.remove("b")
print(letters)

# If you had multiple "b"'s you would need to create a loop to get rid of each individually.

# to delete a range of items use del
del letters[0:3]
print(letters)

# To remove all items from the list use (.clear())
letters.clear()
print(letters)

5.6 - Finding Items
letters = ["a", "b", "c", "a"]
print(letters.index("a"))
# .index will return the first occurrance's index number
# if you were to try to find an object that wasn't in the list you would have an error come back:
# print(letters.index("d"))
# to check if it is in the list, you can use the 'in' operator:
if "d" in letters:
    print(letters.index("d"))
print(letters.count("d"))
print(letters.count("a"))

5.7 - Sorting Lists
numbers = [3, 51, 2, 8, 6]
# Ascending order (default of .sort() method)
numbers.sort()
print(numbers)
# Descending:
numbers.sort(reverse=True)
print(numbers)

# to not change the original list you can use the sorted function
numberz = [3, 51, 2, 8, 6]
print(sorted(numberz, reverse=True))  # Descending
print(numberz)

# For sorting tuples within a list:
items = [
    ("Product1", 10),
    ("Product2", 9),
    ("Product3", 12),
]
# doing the following won't sort it, because python doesn't know how to sort tuples
items.sort()
print(items)

# Instead we need to create a function.


def sort_item(item):
    return item[1]  # based on price (second piece of tuple)


items.sort(key=sort_item, reverse=True)
print(items)

5.8 - Lambda Functions
items = [
    ("Product1", 10),
    ("Product2", 9),
    ("Product3", 12),
]


# def sort_item(item):
#    return item[1]  # based on price (second piece of tuple)


# items.sort(key=sort_item, reverse=True)
# print(items)

# Instead use a lambda to clean the code.
# lambda or anonymous function:

# items.sort(key=lambda parameters:expression)
items.sort(key=lambda item: item[1])
print(items)

5.9 - Map Function
items = [
    ("Product1", 10),
    ("Product2", 9),
    ("Product3", 12),
]
# each item in the list is a tuple of two items
# We are only interested in the price of these items. So we want a list of only numbers

prices = []
for item in items:
    prices.append(item[1])

print(prices)

# There is a better and more elegant way. Using the 'map' function

prices = list(map(lambda item: item[1], items))
print(prices)

5.10 - Filter Function












